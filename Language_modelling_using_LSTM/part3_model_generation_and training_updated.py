################  DATA EXTRACTION #####################
############### part 3 of  Phrase prediction Algo #####
#Action :model creation and model training alongwith model matrices plotting
#Input: text file generated by part 2 (intern2.txt)
#outut: model saved in h5 file and tokanizer in pickle file
#
#Author: sumit chandak  (chandaksumit29@gmail.com)
#Date: 1/12/2018
#
##########################################################


import keras
from array import array
import numpy as np
import keras.utils as utils
from matplotlib import pyplot
from keras.models import Sequential
from keras.layers import Dense, Activation, LSTM, Embedding
from pickle import dump




def load_data(filename):
	file = open(filename, 'r')
	text = file.read()
	file.close()
	return text

def main():
    in_filename = 'inter_2.txt'
    data = load_data(in_filename)
    lines = data.split('\n')


    tokenclass = keras.preprocessing.text.Tokenizer()
    tokenclass.fit_on_texts(lines)
    sequence = tokenclass.texts_to_sequences(lines)


    vocab_size = len(tokenclass.word_index) + 1
    

    sequence = np.array(sequence)
    X_train, y_train = sequence[:,:-1], sequence[:,-1]
    y_train = utils.to_categorical(y_train, num_classes=vocab_size)
    seq_length = X_train.shape[1]




    model = Sequential()
    model.add(Embedding(vocab_size, 100, input_length=seq_length))
    model.add(LSTM(units=100, return_sequences=True))
    #model.add(LSTM(units=50, return_sequences=True))
    model.add(LSTM(units=100))
    model.add(Dense(units=100, activation='relu'))
    model.add(Dense(vocab_size, activation='softmax'))
    print(model.summary())


    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy','mse', 'mae', 'mape'])
    history=model.fit(X_train, y_train, batch_size=128, epochs=100)

    pyplot.plot(history.history['acc'])
    #pyplot.plot(history.history['mean_squared_error'])
    #pyplot.plot(history.history['mean_absolute_error'])
    #pyplot.plot(history.history['mean_absolute_percentage_error'])


    model.save('model.h5')
    dump(tokenclass, open('token_class.pkl', 'wb'))


if __name__ == "__main__":
    main()


